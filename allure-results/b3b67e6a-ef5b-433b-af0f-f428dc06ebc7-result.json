{"name": "test_login_with_invalid_credentials", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=132.0.6834.160)\nStacktrace:\n\tGetHandleVerifier [0x00007FF688F102F5+28725]\n\t(No symbol) [0x00007FF688E72AE0]\n\t(No symbol) [0x00007FF688D0510A]\n\t(No symbol) [0x00007FF688CDEEA5]\n\t(No symbol) [0x00007FF688D86F87]\n\t(No symbol) [0x00007FF688D9FA52]\n\t(No symbol) [0x00007FF688D7FD53]\n\t(No symbol) [0x00007FF688D4A0E3]\n\t(No symbol) [0x00007FF688D4B471]\n\tGetHandleVerifier [0x00007FF68923F30D+3366989]\n\tGetHandleVerifier [0x00007FF6892512F0+3440688]\n\tGetHandleVerifier [0x00007FF6892478FD+3401277]\n\tGetHandleVerifier [0x00007FF688FDAAAB+858091]\n\t(No symbol) [0x00007FF688E7E74F]\n\t(No symbol) [0x00007FF688E7A304]\n\t(No symbol) [0x00007FF688E7A49D]\n\t(No symbol) [0x00007FF688E68B69]\n\tBaseThreadInitThunk [0x00007FFA3540E8D7+23]\n\tRtlUserThreadStart [0x00007FFA370DBF2C+44]", "trace": "self = <tests.test_login_page.TestLoginPage testMethod=test_login_with_invalid_credentials>\n\n    def test_login_with_invalid_credentials(self):\n        \"\"\"Test login with incorrect username and password.\"\"\"\n>       self.login_page.login(\"wronguser\", \"wrongpassword\")\n\ntest_suite\\tests\\test_login_page.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_suite\\pages\\login_page.py:50: in login\n    self.enter_username(username_1)\ntest_suite\\pages\\login_page.py:25: in enter_username\n    self.enter_text(self.USERNAME_FIELD, username)\ntest_suite\\pages\\base_page.py:13: in enter_text\n    WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located(by_locator)).send_keys(text)\nC:\\Users\\SHTLP_0060\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nC:\\Users\\SHTLP_0060\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\nC:\\Users\\SHTLP_0060\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\SHTLP_0060\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000168E3360DD0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF688E68B69]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA3540E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFA370DBF2C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=132.0.6834.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF688F102F5+28725]\nE       \t(No symbol) [0x00007FF688E72AE0]\nE       \t(No symbol) [0x00007FF688D0510A]\nE       \t(No symbol) [0x00007FF688CDEEA5]\nE       \t(No symbol) [0x00007FF688D86F87]\nE       \t(No symbol) [0x00007FF688D9FA52]\nE       \t(No symbol) [0x00007FF688D7FD53]\nE       \t(No symbol) [0x00007FF688D4A0E3]\nE       \t(No symbol) [0x00007FF688D4B471]\nE       \tGetHandleVerifier [0x00007FF68923F30D+3366989]\nE       \tGetHandleVerifier [0x00007FF6892512F0+3440688]\nE       \tGetHandleVerifier [0x00007FF6892478FD+3401277]\nE       \tGetHandleVerifier [0x00007FF688FDAAAB+858091]\nE       \t(No symbol) [0x00007FF688E7E74F]\nE       \t(No symbol) [0x00007FF688E7A304]\nE       \t(No symbol) [0x00007FF688E7A49D]\nE       \t(No symbol) [0x00007FF688E68B69]\nE       \tBaseThreadInitThunk [0x00007FFA3540E8D7+23]\nE       \tRtlUserThreadStart [0x00007FFA370DBF2C+44]\n\nC:\\Users\\SHTLP_0060\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "description": "Test login with incorrect username and password.", "start": 1739337526527, "stop": 1739337533986, "uuid": "0676b72e-5749-4568-b06c-0a3d2f15758d", "historyId": "73c00f69a792a00bbee383bc64015d8b", "testCaseId": "73c00f69a792a00bbee383bc64015d8b", "fullName": "test_suite.tests.test_login_page.TestLoginPage#test_login_with_invalid_credentials", "labels": [{"name": "parentSuite", "value": "test_suite.tests"}, {"name": "suite", "value": "test_login_page"}, {"name": "subSuite", "value": "TestLoginPage"}, {"name": "host", "value": "DESKTOP-RODAF52"}, {"name": "thread", "value": "19116-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_suite.tests.test_login_page"}]}